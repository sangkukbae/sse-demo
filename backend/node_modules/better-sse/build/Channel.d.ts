import { TypedEmitter, EventMap } from "./lib/TypedEmitter";
import { Session } from "./Session";
interface BroadcastOptions {
    /**
     * Filter sessions that should receive the event.
     *
     * Called with each session and should return `true` to allow the event to be sent and otherwise return `false` to prevent the session from receiving the event.
     */
    filter?: (session: Session) => boolean;
}
interface ChannelEvents extends EventMap {
    "session-registered": (session: Session) => void;
    "session-deregistered": (session: Session) => void;
    "session-disconnected": (session: Session) => void;
    broadcast: (data: unknown, eventName: string) => void;
}
/**
 * A Channel is used to broadcast events to many sessions at once.
 *
 * It extends from the {@link https://nodejs.org/api/events.html#events_class_eventemitter | EventEmitter} class.
 */
declare class Channel<State extends Record<string, unknown> = Record<string, unknown>> extends TypedEmitter<ChannelEvents> {
    /**
     * Custom state for this channel.
     * Use this object to safely store information related to the channel.
     */
    state: State;
    private sessions;
    constructor();
    /**
     * List of the currently active sessions subscribed to this channel.
     */
    get activeSessions(): ReadonlyArray<Session>;
    /**
     * Number of sessions subscribed to this channel.
     */
    get sessionCount(): number;
    /**
     * Register a session so that it can start receiving events from this channel.
     *
     * @param session - Session to register.
     */
    register(session: Session): this;
    /**
     * Deregister a session so that it no longer receives events from this channel.
     *
     * @param session - Session to deregister.
     */
    deregister(session: Session): this;
    /**
     * Push an event to every active session on this channel.
     *
     * Takes the same arguments as the `Session#push` method.
     */
    broadcast: (data: unknown, eventName?: string | undefined, options?: BroadcastOptions) => this;
}
export type { BroadcastOptions, ChannelEvents };
export { Channel };
